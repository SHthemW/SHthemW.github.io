<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Android Studio真机调试分析闪退原因</title>
      <link href="/2025/10/20/%E4%BD%BF%E7%94%A8Android-Studio%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90%E9%97%AA%E9%80%80%E5%8E%9F%E5%9B%A0/"/>
      <url>/2025/10/20/%E4%BD%BF%E7%94%A8Android-Studio%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90%E9%97%AA%E9%80%80%E5%8E%9F%E5%9B%A0/</url>
      
        <content type="html"><![CDATA[<p>软件在真机上Crash后, 我们往往不能直接得到错误日志, 因此通常需要借助第三方工具来实现对日志的抓取和分析. 本文记录一次Unity游戏在安卓环境下频繁闪退的Debug过程, 使用Android Studio 2025.1.4.8进行日志抓取.</p><p><br></p><h2 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h2><ol><li><p>准备能复现问题的手机, 进入开发者模式以进行调试. 不同手机品牌进入开发者模式的方式可能不同 (大体上都是类似的步骤, 只是菜单和选项名称有差异), 可以百度一下. 本文以我手里的小米15做演示.</p></li><li><p>打开设置, 在搜索栏里搜索”全部参数与信息” (或者从”关于本机” 等界面点进来, 随意), 进入详情界面:</p><p><img src="https://gitee.com/SHthemW/Blog-Images/raw/master/Screenshot_2025-10-20-19-40-07-064_com.android.se.jpg" alt="Screenshot_2025-10-20-19-40-07-064_com.android.se" style="zoom:25%;">    <img src="https://gitee.com/SHthemW/Blog-Images/raw/master/Screenshot_2025-10-20-19-40-18-819_com.android.se.jpg" alt="Screenshot_2025-10-20-19-40-18-819_com.android.se" style="zoom:25%;"></p></li><li><p>连续点击五次系统版本号 (我的手机上是”OS版本”), 直到弹出”你已经处于开发者模式” 或类似的讯息:<br><img src="https://gitee.com/SHthemW/Blog-Images/raw/master/Screenshot_2025-10-20-19-42-52-995_com.android.se.jpg" alt="Screenshot_2025-10-20-19-42-52-995_com.android.se" style="zoom:25%;"></p></li><li><p>打开手机的USB调试:<br><img src="https://gitee.com/SHthemW/Blog-Images/raw/master/Screenshot_2025-10-20-19-51-25-648_com.android.se.jpg" alt="Screenshot_2025-10-20-19-51-25-648_com.android.se" style="zoom:25%;">    <img src="https://gitee.com/SHthemW/Blog-Images/raw/master/Screenshot_2025-10-20-19-51-16-138_com.android.se.jpg" alt="Screenshot_2025-10-20-19-51-16-138_com.android.se" style="zoom:25%;"></p><p>USB调试是比较敏感的权限, 部分比较新的手机可能会弹窗警告. 如果你信任用于调试的设备, 可以全选同意, 调试完成后关闭USB调试即可.</p></li><li><p>至此, 手机端的准备工作已经完成.</p></li></ol><p><br></p><h2 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h2><ol><li><p>下载并安装Android Studio: 直接在官网下载 <a href="https://developer.android.google.cn/studio?hl=zh-cn">下载 Android Studio 和应用工具 - Android 开发者  | Android Developers</a></p></li><li><p>初次启动时AS应该会让你创建一个项目, 如下图所示. 我们本次的目的只是抓取日志, 并不需要运行AS中的项目, 所以选择第一项 “空项目” 即可. 理论上随便选一个其它的也没有什么影响, 我们只要进入AS的主界面即可.</p><p><img src="https://gitee.com/SHthemW/Blog-Images/raw/master/img_v3_02r8_8749a89b-cc2b-4037-b858-35263e9c312g.jpg" alt="img_v3_02r8_8749a89b-cc2b-4037-b858-35263e9c312g" style="zoom:33%;"></p><p>项目名称什么的随便填填, 我们只是需要一个空项目用于测试而已</p><p><img src="https://gitee.com/SHthemW/Blog-Images/raw/master/img_v3_02r8_50547352-34c5-491a-ae11-f031e443f25g.jpg" alt="img_v3_02r8_50547352-34c5-491a-ae11-f031e443f25g" style="zoom: 33%;"></p></li><li><p>AS主界面如下图所示:</p><p>   <img src="https://gitee.com/SHthemW/Blog-Images/raw/master/img_v3_02r8_e7f3a6c7-5b72-4e10-bcca-894f9f3f447g.jpg" alt="img_v3_02r8_e7f3a6c7-5b72-4e10-bcca-894f9f3f447g" style="zoom: 25%;"></p><p>   新版本的AS很莫名其妙的把顶上的菜单栏默认隐藏了, 如果你看不到顶部菜单栏, 先按Ctrl+Alt+S调出设置界面, 然后搜menu, 把如下所示的”Main Menu”选项设为”Show above Main ToolBar”即可.</p><p>   <img src="https://gitee.com/SHthemW/Blog-Images/raw/master/img_v3_02r8_4994c003-41a6-43f8-bffe-37dd171d233g.jpg" alt="img_v3_02r8_4994c003-41a6-43f8-bffe-37dd171d233g" style="zoom: 25%;"></p></li><li><p>接下来安装用于USB调试的插件. 按Ctrl+Alt+S打开设置界面, 搜索”Android SDK”, 并选中右侧选项中的”SDK Tools”:</p><p>   <img src="https://gitee.com/SHthemW/Blog-Images/raw/master/img_v3_02r8_555b22e5-4d2b-48cf-a55b-e7c75e2c357g.jpg" alt="img_v3_02r8_555b22e5-4d2b-48cf-a55b-e7c75e2c357g" style="zoom:33%;"></p><p>   不同版本的Android Studio这里似乎有区别, 一些老版本的”Android SDK”选项位于”Appearance &amp; Behaviour/System Settings” 分类下, 和图示旅游不同. 还是直接搜索比较方便快捷.</p><p>   在列表中选择”Google USB Driver”这个选项, 点击右下角的”Apply”按钮安装.</p><p>   <img src="https://gitee.com/SHthemW/Blog-Images/raw/master/img_v3_02r8_233dea20-02ce-47b9-a78e-4b167ced56bg.jpg" alt="img_v3_02r8_233dea20-02ce-47b9-a78e-4b167ced56bg"></p><p>   安装会花费一定的时间, 耐心等待即可.</p></li></ol><p><br></p><h2 id="日志抓取"><a href="#日志抓取" class="headerlink" title="日志抓取"></a>日志抓取</h2><p>至此准备工作就全部完成了. 用一根<strong>支持数据传输</strong>的USB线缆连接刚才操作过的手机和电脑, 如果你的手机在连接电脑时弹窗, 选择”允许传输数据”和”信任该设备”等选项.</p><p>此时如果你的操作无误, AS的屏幕顶端应该显示类似的信息:</p><p><img src="https://gitee.com/SHthemW/Blog-Images/raw/master/img_v3_02r8_08cf67f2-34a2-4ff5-8057-f616efc7e22g.jpg" alt="img_v3_02r8_08cf67f2-34a2-4ff5-8057-f616efc7e22g"></p><p>可以看到自己设备的名称了.</p><ol><li><p>在菜单栏的View-Tool Windows下选择Logcat, 这是新版AS自带的日志处理工具:</p><p><img src="https://gitee.com/SHthemW/Blog-Images/raw/master/img_v3_02r8_dc00dc47-c418-4e08-936d-77e72177c7fg.jpg" alt="img_v3_02r8_dc00dc47-c418-4e08-936d-77e72177c7fg" style="zoom: 100%;"></p></li><li><p>Logcat窗口大约如下所示: 如果你的设备已经连接, 可能会疯狂的弹出各种日志. 此时可以在上面的筛选框中进行筛选. 通常, 对特定应用程序的Debug可以直接使用应用程序的包名, 如com.tencent.wechat等.<br><img src="https://gitee.com/SHthemW/Blog-Images/raw/master/img_v3_02r8_45cdf3e4-8095-4e30-b735-340de212c10g.jpg" alt="img_v3_02r8_45cdf3e4-8095-4e30-b735-340de212c10g"></p></li><li><p>此时可以运行问题程序了. 一般来说, 日志会包含程序自己的日志和相关的系统日志, Crash级别的事件都会被记录. 在定位到关键信息后, 可以点击Logcat窗口左侧的按钮导出日志, 方便后续分析和查看.<img src="https://gitee.com/SHthemW/Blog-Images/raw/master/img_v3_02r8_d31fff91-ee52-49a9-a0e3-7dd5897221eg.png" alt="img_v3_02r8_d31fff91-ee52-49a9-a0e3-7dd5897221eg"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Software, Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打造具有&quot;Y轴&quot;的2D top-down游戏</title>
      <link href="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/"/>
      <url>/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<p>​    </p><blockquote><p>本文在知乎同步发布: <a href="https://zhuanlan.zhihu.com/p/686230441">打造具有”Y轴”的2D top-down游戏 - 知乎 (zhihu.com)</a></p><p>感谢点赞收藏的朋友们!   </p></blockquote><p>想象一座带有桥洞的小桥. 玩家先从左侧上桥, 再从右侧下桥, 最后从中间的桥洞走过去.</p><p>这是一个很简单, 很常见的场景. 然而, 要在2D top-down视角的游戏中实现它却比想象中更复杂 —在桥上阻挡玩家跳下去的碰撞盒, 要如何才不会阻挡要穿过桥洞的玩家?</p><p>Imagine a small bridge with a bridge opening Players first climb onto the bridge on the left, then descend from the bridge on the right, and finally walk through the middle bridge hole.</p><p>This is obviously a very simple and common scenario However, achieving it in a 2D top-down perspective game is more complex than imagined - blocking the player’s fence collision box on the bridge, how can we not block the player who wants to cross the bridge hole?</p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/tit.png" alt="tit"></p><p><br></p><h2 id="其实你一直在走迷宫"><a href="#其实你一直在走迷宫" class="headerlink" title="其实你一直在走迷宫"></a>其实你一直在走迷宫</h2><p>一般的2D俯视角游戏通常隐去了”地层高度”这一设计. 玩家所看到的大部分地形都是纯视觉效果, 其实际上只是由贴图和碰撞盒而构成的平面, 玩家在这些”地层”间穿梭时其实更像是在走一个2D的迷宫.</p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/ref1.jpg" alt="参考图1"></p><p>这种办法显然是高性价比的妥协 —多数情况下玩家并不会关心游戏内部的具体实现, 只要让地形”看起来像有高度”就足以满足大多数游戏的需求了. </p><p>但代价是什么呢古尔丹? 请看下面的场景:</p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/ref2.jpg" alt="参考图2"></p><p>这是一个在游戏中经常能遇到的场景, 看起来与图1似乎并没有什么不同, 除了人物移动到了高地形的后方. 现在请留意图片上的A点. 假如玩家希望移动到这个位置, 他该怎么做? </p><p>答案是: 不知道!</p><h3 id="死区缺陷"><a href="#死区缺陷" class="headerlink" title="死区缺陷"></a>死区缺陷</h3><p>为什么? 因为产生了Y坐标映射歧义. 图上的点A看似是一个确切的坐标点, 但其实不然: 过摄像机和A点的射线在这个场景中其实穿透了两个平面, 也就是说, 产生了两个交点. 这导致A点在场景中其实代表的是x, z坐标相同而y坐标不同的两个<em>不同</em>位置, 也就不难理解为什么我们很难确定目的地了.</p><p>通过以下的示意图可以更好的了解目前的处境:</p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/s1.png" alt="示意图"></p><ul><li><p>状况1中, 所有面都仅被摄像机发出的射线穿透一次, 此时场景内的每一个(x, z)坐标均对应唯一的一个y坐标, 因此不会产生什么问题. 本文的示意图1就代表了这种情况.</p></li><li><p>状况2中, 部分地形对另一部分地形(从相机的角度看)发生了遮挡. 导致部分射线同时穿过了被遮挡区域和遮挡其的区域. 此时若在这些区域(死区)内选择坐标点, 就会产生一个坐标对应多个实际位置的情况.</p></li></ul><h3 id="妥协"><a href="#妥协" class="headerlink" title="妥协"></a>妥协</h3><p>对多数top-down的2D游戏来说, 这个问题的解决方案也比想象中的更简单粗暴 —要么直接禁止玩家前往这些区域, 要么将产生冲突的两个区域中的一个设置为不可达, 只为另一个区域配置碰撞盒. </p><p>例如在这款示例游戏中, 玩家角色只能向下跑动到如下图所示的位置 —显然开发者是按照岩壁顶面配置的碰撞区域. 同样显然的是, 一部分本该可达的区域(被岩石遮挡的后方)由于这种妥协变的不再可达了.</p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/ref3.jpg" alt="已经过不去了!&gt;_&lt;"></p><p>另外一种常用的解决方案是直接使用3D模型, 而后使用三渲二的方式实现视觉上的2D效果. 不过这种情况实际属于3D游戏的范畴, 不在本文的讨论范围之内, 在此不进行详细论述.</p><p>2D top-down游戏的这种特性一定程度上降低了地图的可交互能力. 实际上, 一些早期的此类游戏往往将地图中的实体设计的卡通而矮小, 将游戏性中心更多放在战斗/特效/机制等层面, 以此来扬长避短. 久而久之, 玩家在面对这种游戏时甚至都不会产生对地形交互的期许 —大家只会想: “哦, 这里有一个城堡啊, 我们绕过去吧” 而不是”从狗洞钻进去跟阳台上的哥们打个招呼再从二楼绕道出来”.</p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/ref4.gif" alt="ref4"></p><p>当然, 这不失为是一种风格化的游戏特色. 但交互性之于游戏就好像珠峰之于攀山者, 是一个永无止境的追求标准. 此外对于诸多小型工作室, 制作和渲染3D模型的成本往往是高昂的. 有没有什么办法能缓解2D top-down的这种死区缺陷呢?</p><blockquote><p>注: 本文仅论证技术层面的可行性. 对于游戏设计上是否有必要/商业上是否受欢迎等维度将不做过多探讨. 也欢迎大家分享自己的想法 ;)</p></blockquote><p><br></p><h2 id="正确映射高度"><a href="#正确映射高度" class="headerlink" title="正确映射高度"></a>正确映射高度</h2><p>对于模型在y轴上的顶点信息和碰撞盒, top-down并非完全不能处理这种情况. 往简单的说, 如果开发者能手动为每一层高设置碰撞盒并使其动态切换, 就能实现类似3D碰撞的效果.</p><h3 id="处理-X-Z-面碰撞"><a href="#处理-X-Z-面碰撞" class="headerlink" title="处理(X, Z)面碰撞"></a>处理(X, Z)面碰撞</h3><p>更确切的说, 地图上的实体应该在不同”高度层”上响应不同的碰撞区域. 仍然以之前的图2所示, 我们希望玩家站在低层平台时只响应低层的碰撞盒(下图蓝色框线), 而站在高台时改为使用高台的碰撞盒(图中紫色框线). </p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/ref6.jpg" alt="ref6"></p><p>这样一来, 分层布设的碰撞盒相当于模糊的携带了其包围区域的y坐标信息, 让整个场景产生了伪3D的感觉. 如图所示的这种画法是以图上高地的高度作为粒度划分的. 考虑到为每一层tile都绘制碰撞盒会比较复杂, 这里暂时只进行简单的建模.</p><p>下面我们在Unity引擎中使用Tilemap尝试构造一个这样的地图:</p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/s3.jpg" alt="s3"></p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/height_map_demo.gif" alt="引擎版本2022.3"></p><p>红色方格表示的就是碰撞块. 图中展示了两个不同高度层的碰撞盒.</p><p>对场景中每个需要的高度绘制碰撞盒并不复杂, 实际上只要做好分层处理, 它便和绘制单层碰撞盒一样容易. Unity引擎为每个GameObject提供了LayerMask和SortingLayer属性, 分别用于控制其逻辑层和渲染排序层.</p><p>如下图所示, Unity允许开发者自定义逻辑层间的物理交互关系. 我们可以为碰撞盒所在的物体设置高度Layer, 并在Unity提供的Layer Collision Matrix中设置碰撞关系: 仅允许高度相同的两个层间进行碰撞.</p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/s2.png" alt="请忽略图中的Float层"></p><blockquote><p>注意, Unity中的Layer Mask是使用32位掩码进行存储的, 要特别注意对其的设置和修改.</p></blockquote><h3 id="处理渲染顺序"><a href="#处理渲染顺序" class="headerlink" title="处理渲染顺序"></a>处理渲染顺序</h3><p>初步打造了多层次的碰撞模型后, 我们还需要按照正确的次序渲染不同高度的模型. 对于top-down视角的X-Z面(即玩家站立的平面), 高度更”高”的面距离摄像机的距离总是更近, 应当被优先渲染. 在下面所示的场景中, C面总是会遮挡比其高度更低的B面, 同样的原理它们也会遮挡地面A面.</p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/s4.png" alt="s4"></p><p>现在来考虑X-Y面(即面向相机的墙面)的渲染情况. 它们的逻辑高度其实处于”墙”所连接的低处和高处之间. 同样道理的还有处于高度内的实体 -如图上的玩家角色位于高度B-C之间, 地上的灌木丛位于A-B之间. 这些物体总是被更高层的地面遮挡, 也总是遮挡其所”踩”着的地面. 而同一高度层的物体两两之间则遵循”Z坐标优先排序” —一种传统top-down中很常用的渲染方法.</p><p>根据这些设计, 我们如图所示搭建Sorting Order的原型:</p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/s5.png" alt="s5"></p><p>上图中的grd表示X-Z面, upr表示X-Y面. 后面的细分数值是用于搭建同一层中次序不同的物体的(如土地和长在上面的草), 读者可以暂时只关心上面命名中的前缀.</p><p>至此, 我们已经可以实现下图所示的效果:</p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/walk demo.gif" alt="walk demo"></p><p>可以看到在穿越城门时玩家角色成功被城门上的拱门遮挡了, 这是由于组成拱门的tile具有比玩家更大的逻辑高度和渲染优先级. 和通常的top-down游戏不同的是, 我们的做法更客观的映射了地图高度, 而不是浅浅的区分一个”所谓前景”和”所谓背景”.</p><h3 id="“楼梯”"><a href="#“楼梯”" class="headerlink" title="“楼梯”"></a>“楼梯”</h3><blockquote><p>截至目前, 我们使用的是Unity自带的Layer Mask和Sorting Layer属性. 单独分别设置它们很容易在维护时增添不必要的麻烦, 因此可以考虑专门编写一个Height2D组件用于封装”高度”属性. 读者可以自己根据项目设计模块, 下文中的Properties仅作为伪代码参考.</p></blockquote><p>在游戏中, 实体的高度往往会产生变化: 玩家可能期望通过楼梯走向一块比较高的地形, 怪物也可能会由于闲逛而跑到远离出生点的区域. 玩家的初始高度可以通过静态调整<code>Height2D.height</code>属性来设置, 那如何做到动态识别玩家当前所处的高度呢?</p><p>考虑一个如下图所示的模型:</p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/s6.png" alt="好吧这两个数字可能被压的太扁了"></p><p>图中L表示lower(低地), H表示higher(高地). 留意它们之间的两条分别写着1和0的紫色线条, 这两条线就是高度切换的关键. 实际上, 它们是一组”逻辑楼梯”, 如下图所示:</p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/s7.jpg" alt="s7"></p><p>逻辑楼梯中具有两个entrance, 分别挂载了具有切换其中实体功能的组件. 当实体进入楼梯的判定区时, 楼梯程序便会改变通过其中的实体的<code>Height2D.height</code>属性, 达到切换高度的效果. 你可以将这些”逻辑楼梯”布置在场景中真正的楼梯区域, 或是任何具有类似高度切换功能的区域, 实现玩家的上下位移功能.</p><p>下图是”逻辑楼梯”在演示场景中的应用:</p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/s8-1.jpg" alt="s8-1"></p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/s8-2.jpg" alt="s8-2"></p><p>可以看到, “逻辑楼梯”不仅适用于传统意义上的楼梯, 其它游戏场景中常见的高度切换设备(如梯子)也是其适用对象.</p><p>在完成高度切换逻辑后, 我们可以轻易实现下面所展示的效果:</p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/trans demo.gif" alt="trans demo"></p><p>请留意在上图的流程中Player的<code>height</code>属性是动态变化的 (0 =&gt; 1 =&gt; 2 =&gt; 1).</p><p>以下是一个效果更为明显的示例:</p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/fly demo.gif" alt="fly demo"></p><p>在这个场景中, 玩家从城墙上方(高度2)滑翔并降落到了地面(高度1). 可以看到, 原先在城墙上包围玩家的碰撞盒立刻失效了, 玩家能够穿越那些区域并从城门里走出来. 这也回答了本文开头提到的”桥洞模型”问题.</p><p><br></p><h2 id="更科学的做法"><a href="#更科学的做法" class="headerlink" title="更科学的做法"></a>更科学的做法</h2><p>对于中小型项目而言, 上面提到的分层碰撞盒和高度field算是一个可行的解决方案. 然而本质上说, 2D top-down地图的每个坐标均只携带了X, Z平面的坐标信息而缺少Y坐标信息, 这才是我们难以映射高度的根本原因.</p><p>从更纯粹的算法和数学层面, 我们也可以考虑以下设计:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> SpaceType : <span class="built_in">int</span></span><br><span class="line">&#123;</span><br><span class="line">    None = <span class="number">0</span>,    <span class="comment">// 表示空间内什么都没有. 理论上该值不该被使用, 因为YSpace字典中只会定义非空空间.</span></span><br><span class="line">    Solid,       <span class="comment">// 表示空间内具有实心块</span></span><br><span class="line">    Transitional <span class="comment">// 表示空间内的块具有过渡功能</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Coordinate</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> X &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Z &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="built_in">int</span>, SpaceType&gt; YSpace &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中, 我们用全新的数据结构表示了地图坐标. 除了传统的X-Z坐标外, 添加了<code>YSpace</code>字典用于表示在当前平面坐标上的Y空间. 字典的Key表示每个非空的Y坐标, Value则表示当前存在的物块类型(实心/斜坡).</p><p>这个做法可以更轻易的表示复杂地形, 甚至带有中空结构的地形:</p><p><img src="/2024/03/09/%E6%89%93%E9%80%A0%E5%85%B7%E6%9C%89-Y%E8%BD%B4-%E7%9A%842D-top-down%E6%B8%B8%E6%88%8F/s9.jpg" alt="用MC搭了个模型"></p><p>如上图所示的构造可以用如下伪代码定义: (设左侧灰色顶点为原点, 右-上为正方向)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 四个高度为0的地块</span></span><br><span class="line"><span class="keyword">new</span> Coordinate() &#123; X = <span class="number">0</span>, Z = <span class="number">0</span>, YSpace = <span class="keyword">new</span>()&#123;&#125; &#125;;</span><br><span class="line"><span class="keyword">new</span> Coordinate() &#123; X = <span class="number">1</span>, Z = <span class="number">0</span>, YSpace = <span class="keyword">new</span>()&#123;&#125; &#125;;</span><br><span class="line"><span class="keyword">new</span> Coordinate() &#123; X = <span class="number">2</span>, Z = <span class="number">0</span>, YSpace = <span class="keyword">new</span>()&#123;&#125; &#125;;</span><br><span class="line"><span class="keyword">new</span> Coordinate() &#123; X = <span class="number">2</span>, Z = <span class="number">1</span>, YSpace = <span class="keyword">new</span>()&#123;&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 四个高度为1的地块</span></span><br><span class="line"><span class="keyword">new</span> Coordinate() &#123; X = <span class="number">1</span>, Z = <span class="number">1</span>, YSpace = <span class="keyword">new</span>()&#123;<span class="number">1</span> : SpaceType.Solid&#125; &#125;;</span><br><span class="line"><span class="keyword">new</span> Coordinate() &#123; X = <span class="number">1</span>, Z = <span class="number">2</span>, YSpace = <span class="keyword">new</span>()&#123;<span class="number">1</span> : SpaceType.Solid&#125; &#125;;</span><br><span class="line"><span class="keyword">new</span> Coordinate() &#123; X = <span class="number">2</span>, Z = <span class="number">2</span>, YSpace = <span class="keyword">new</span>()&#123;<span class="number">1</span> : SpaceType.Solid&#125; &#125;;</span><br><span class="line"><span class="keyword">new</span> Coordinate() &#123; X = <span class="number">2</span>, Z = <span class="number">3</span>, YSpace = <span class="keyword">new</span>()&#123;<span class="number">1</span> : SpaceType.Solid&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三个高度为2的地块</span></span><br><span class="line"><span class="keyword">new</span> Coordinate() &#123; X = <span class="number">0</span>, Z = <span class="number">2</span>, YSpace = <span class="keyword">new</span>()&#123;<span class="number">1</span> : SpaceType.Solid, <span class="number">2</span> : SpaceType.Solid&#125; &#125;;</span><br><span class="line"><span class="keyword">new</span> Coordinate() &#123; X = <span class="number">0</span>, Z = <span class="number">3</span>, YSpace = <span class="keyword">new</span>()&#123;<span class="number">1</span> : SpaceType.Solid, <span class="number">2</span> : SpaceType.Solid&#125; &#125;;</span><br><span class="line"><span class="keyword">new</span> Coordinate() &#123; X = <span class="number">1</span>, Z = <span class="number">3</span>, YSpace = <span class="keyword">new</span>()&#123;<span class="number">1</span> : SpaceType.Solid, <span class="number">2</span> : SpaceType.Solid&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个中间空了一格的地块:</span></span><br><span class="line"><span class="keyword">new</span> Coordinate() &#123; X = <span class="number">0</span>, Z = <span class="number">1</span>, YSpace = <span class="keyword">new</span>()&#123;<span class="number">1</span> : SpaceType.Solid, <span class="number">3</span> : SpaceType.Solid&#125; &#125;;</span><br></pre></td></tr></table></figure><p>这种数据结构显然制定了数学层面上更为严谨的规则 —它真正的为每个平面点分配了Y坐标. </p><p>从理论上说, 为这种模型编写<code>TerrainParser</code>并实现与上文类似的效果是可行的. 然而, 考虑到为每个采样点分配存储Y空间的字典所带来的空间和性能开销, 以及在这个模型下实现寻路算法的复杂性, 这种做法未必能有效地在工程中取代本文提到的第一种实现.</p><p><br></p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>要访问本文中的示例游戏,</p><p>欢迎关注作者GitHub: <a href="https://github.com/SHthemW">SHthemW (S.H.W) (github.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    
  
  
</search>
